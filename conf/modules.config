//////////////////////////////////////
/// MODULE-SPECIFIC CONFIG OPTIONS ///
//////////////////////////////////////

process {

    withName:'PARSE_SAMPLESHEET' {
        publishDir = [
            path: { "${params.outdir}/metadata" },
            mode: 'copy',
            pattern: 'SampleSheetNextflow.csv'
        ]
    }

    withName:'FASTQC' {
        ext.args = null
        publishDir = [
            path: { params.trim_reads ? "${params.outdir}/fastqc/raw" : "${params.outdir}/fastqc" },
            mode: 'copy',
            pattern: '[!_]*'
        ]
    }

    withName:'.*:UNPIGZ|UNPIGZ' {
        ext.args = null
    }

    withName:'.*:GTF_TX2GENE' {
        publishDir = [
            path: { "${params.outdir}/metadata" },
            mode: 'copy',
            pattern: '*tx2gene.csv'
        ]
    }

     withName:'.*:GTF_METADATA' {
         ext.args = null
         publishDir = [
             path: { "${params.outdir}/metadata" },
             mode: 'copy',
             pattern: '*metadata.csv'
        ]
    }

    withName:'PICARD_COLLECTRNASEQMETRICS' {
        ext.args = null
        publishDir = [
            path: { "${params.outdir}/picard" },
            mode: 'copy',
            pattern: '[!_]*'
        ]
    }

    withName:'SALMON_QUANT_ALIGNED' {
        ext.args = [
            '--gcBias',
            '--fldMean 175',
            '--fldSD 60'
        ]
        publishDir = [
            path: { "${params.outdir}/salmon" },
            mode: 'copy',
            pattern: '[!_]*'
        ]
    }
    
    withName:'CUSTOM_DUMPSOFTWAREVERSIONS' {
        ext.args = null
        publishDir = [
            path: { "${params.outdir}/versions" },
            mode: 'copy',
            pattern: '*.yml'
        ]
    }

    withName:'MAKE_EXPERIMENT_JSON' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: 'experiment.json'
        ]
    }
    
    withName:'MULTIQC' {
        ext.args = null
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: 'copy',
            pattern: '[!_]*'
        ]
    }
}

if (params.trim_reads) {
    process {
        withName:'FASTP' {
            ext.args = ['--overrepresentation_analysis']
            publishDir = [
                [
                path: { "${params.outdir}/fastp" },
                mode: 'copy',
                pattern: '*.fq.gz'
                ],
                [
                path: { "${params.outdir}/fastp" },
                mode: 'copy',
                pattern: '*.fastp.{html,json}'
                ]
            ]
        }

        withName:'FASTQC_TRIMMED' {
            ext.args = null
            publishDir = [
                path: { "${params.outdir}/fastqc/trimmed" },
                mode: 'copy',
                pattern: '[!_]*'
            ]
        }
    }
}

if (params.star_2pass) {
    process {
        withName: 'STAR_2PASS:PASS1' {
            ext.args = [
                '--outReadsUnmapped Fastx',
                '--outSAMtype BAM SortedByCoordinate',
                '--outSAMunmapped Within',
                '--alignIntronMin 20',
                '--alignIntronMax 1200000',
                '--alignSJoverhangMin 8',
                '--alignSJDBoverhangMin 1',
                '--alignMatesGapMax 1200000',
                '--outFilterMultimapNmax 20'
            ]
            ext.suffix = '_pass1_'
            publishDir = [
                [
                path: { "${params.outdir}/star/pass1/bam" },
                mode: 'copy',
                pattern: '*{d,e}.out.bam'
                ],
                [
                path: { "${params.outdir}/star/pass1/junctions" },
                mode: 'copy',
                pattern: '*.SJ.out.tab'
                ],
                [
                path: { "${params.outdir}/star/pass1/unmapped" },
                mode: 'copy',
                pattern: '*.Unmapped.out.mate{1,2}.fastq.gz'
                ],
                [
                path: { "${params.outdir}/star/pass1/log" },
                mode: 'copy',
                pattern: '*Log.{,final,progress}.out'
                ]
            ]
        }

        withName: 'STAR_2PASS:PASS2' {
            ext.args = [
                '--outReadsUnmapped Fastx',
                '--outSAMtype BAM SortedByCoordinate',
                '--outSAMattributes NH HI AS nM NM MD jM jI',
                '--outSAMunmapped Within',
                '--quantMode TranscriptomeSAM',
                '--alignIntronMin 20',
                '--alignIntronMax 1200000',
                '--alignSJoverhangMin 999999',
                '--alignSJDBoverhangMin 1',
                '--alignMatesGapMax 1200000',
                '--outFilterMultimapNmax 20',
                '--outFilterMismatchNmax 9999',
                '--outFilterMismatchNoverLmax 0.04'
            ]
            ext.suffix = null

            publishDir = [
                [
                path: { "${params.outdir}/star/pass2/bam" },
                mode: 'copy',
                pattern: '*{d,e}.out.bam'
                ],
                [
                path: { "${params.outdir}/star/pass2/junctions" },
                mode: 'copy',
                pattern: '*.SJ.out.tab'
                ],
                [
                path: { "${params.outdir}/star/pass2/unmapped" },
                mode: 'copy',
                pattern: '*.Unmapped.out.mate{1,2}.fastq.gz'
                ],
                [
                path: { "${params.outdir}/star/pass2/log" },
                mode: 'copy',
                pattern: '*Log.{,final,progress}.out'
                ]
            ]
        }
    
        withName: 'STAR_2PASS:PORTCULLIS' {
            ext.args.prep = [
                '--verbose'
                ]
            ext.args.junc = [
                '--verbose'
                ]
            ext.args.filt = [
                '--save_bad',
                '--verbose',
                '--threshold 0.4'
                ]
            publishDir = [
                [
                path: { "${params.outdir}/portcullis" },
                mode: 'copy',
                pattern: "**.{pass,fail}.junctions*.{tab,bed}"
                ],
                [
                path: { "${params.outdir}/portcullis" },
                mode: 'copy',
                pattern: "**junctions.{exon,intron}.gff"
                ]
            ]
        }

        withName:'.*:ANNOFILTER_JUNCTIONS|ANNOFILTER_JUNCTIONS' {
            ext.args = [
                '--exclude-seqname MT',
                '--exclude-biotype pseudogene',
                '--exclude-biotype transcribed_processed_pseudogene',
                '--exclude-biotype transcribed_unitary_pseudogene',
                '--exclude-biotype transcribed_unprocessed_pseudogene',
                '--exclude-biotype unitary_pseudogene',
                '--exclude-biotype unprocessed_pseudogene',
                '--exclude-flag chimeric'
            ]
            publishDir = [
                [
                path: { "${params.outdir}/annofilter-junctions/filtered_junctions" },
                mode: 'copy',
                pattern: '*.tab'
                ],
                [
                path: { "${params.outdir}/annofilter-junctions/annotation" },
                mode: 'copy',
                pattern: '*annotated.tsv'
                ],
                [
                path: { "${params.outdir}/annofilter-junctions" },
                mode: 'copy',
                pattern: '*annofilter.log'
                ]
            ]
        }

        withName:'SAMTOOLS_INDEX' {
            ext.args = null
            publishDir = [
                path: { "${params.outdir}/star/" },
                mode: 'copy',
                pattern: '*.{bam.bai,cram.crai}',
                saveAs: { filename -> 
                    if(filename.contains('merged')) {
                        "merged/$filename"
                        } else
                    if(filename.contains('pass1')) {
                        "pass1/bam/$filename"
                        } else
                    if(filename.contains('pass2')) {
                        "pass2/bam/$filename"
                    }
                    else {
                        "pass2/bam/$filename"
                    }
                }
            ]
        }
    }
}

if (params.run_majiq) {
    process {
        withName: 'MAJIQ:GET_MAJIQ_SETTINGS' {
            ext.args = null
            publishDir = [
                [
                path: { "${params.outdir}/majiq/" },
                mode: 'copy',
                pattern: '*.ini'
                ],
                [
                path: { "${params.outdir}/majiq" },
                mode: 'copy',
                pattern: '*view_cmds.txt'
                ]
            ]
        }
        
        withName: 'MAJIQ:MAJIQ_BUILD' {
            ext.args = [
                '--minreads 3',
                '--minpos 2',
                '--min-denovo 5',
                '--irnbins 0.5',
                '--min-intronic-cov 0.01',
                '--simplify -1',
                '--simplify-annotated 0',
                '--simplify-denovo 0',
                '--simplify-ir 0',
                '--markstacks 0.0000001',
                '--m 30'
            ]
            ext.suffix = null
    
            publishDir = [
                [
                path: { "${params.outdir}/majiq/build_out" },
                mode: 'copy',
                pattern: '*.out.majiq'
                ],
                [
                path: { "${params.outdir}/majiq/build_out" },
                mode: 'copy',
                pattern: '*.out.sj'
                ],
                [
                path: { "${params.outdir}/majiq/build_out" },
                mode: 'copy',
                pattern: 'majiq.log'
                ],
                [
                path: { "${params.outdir}/majiq/build_out" },
                mode: 'copy',
                pattern: 'splicegraph.sql'
                ]
            ]
        }
    
        withName: 'MAJIQ:MAJIQ_SAMPLE_PSI|MAJIQ:MAJIQ_GROUP_PSI' {
            ext.args = [
                '--minreads 10',
                '--minpos 3',
                '--min-experiments 0.5',
                '--output-type all'
            ]
            ext.suffix = null
    
            publishDir = [
                [
                path: { "${params.outdir}/majiq/psi_out" },
                mode: 'copy',
                pattern: '*.psi.tsv'
                ],
                [
                path: { "${params.outdir}/majiq/psi_out" },
                mode: 'copy',
                pattern: '*.psi.'
                ],
    	    [
    	    path: { "${params.outdir}/majiq/psi_out" },
    	    mode: 'copy',
                pattern: '*majiq.log'
    	    ]
            ]
        }

    withName: 'MAJIQ:MAJIQ_DELTAPSI' {
        
        ext.args1 = [
            '--min-experiments 0.5',
            '--prior-minreads 20',
            '--prior-minnonzero 10',
            '--prior-iter 1',
            '--output-type all',
            '--minreads 10',
            '--minpos 3'
        ]
        ext.args2 = [
            '--threshold 0.1',
            '--show-all'
        ]

        ext.suffix = null
    
        publishDir = [
            [
            path: { "${params.outdir}/majiq/deltapsi_out" },
            mode: 'copy',
            pattern: '*.deltapsi.tsv'
            ],
            [
            path: { "${params.outdir}/majiq/deltapsi_out" },
            mode: 'copy',
            pattern: '*.deltapsi.voila'
            ],
            [
            path: { "${params.outdir}/majiq/deltapsi_out" },
            mode: 'copy',
            pattern: '*.voila.tsv'
            ],
	          [
	          path: { "${params.outdir}/majiq/deltapsi_out" },
	          mode: 'copy',
            pattern: '*deltapsi_majiq.log'
	          ],
	          [
	          path: { "${params.outdir}/majiq/deltapsi_out" },
	          mode: 'copy',
            pattern: '*.log'
	          ]
        ]
      }
    
    withName: 'MAJIQ:VOILA_TSV' {
    
        ext.args = [
            '--threshold 0.2'
        ]
        ext.suffix = null
            
        publishDir = [
            [
            path: { "${params.outdir}/majiq/deltapsi_out" },
            mode: 'copy',
            pattern: '*.voila.tsv'
            ],
	          [
	          path: { "${params.outdir}/majiq/deltapsi_out" },
	          mode: 'copy',
            pattern: '*.log'
	          ]
        ]
      }
    }
}

    

if (params.star_2pass && params.merge_bams) {
    process {
        withName:'.*:SAMTOOLS_MERGE' {
            ext.args = null
            publishDir = [
                path: { "${params.outdir}/star/merged" },
                mode: 'copy',
                pattern: '*.merged.{bam,cram}'
            ]
        }

    }
}

if (params.star_2pass && params.rebuild_genome) {
    process {
        withName: '.*:STAR_REBUILD' {
            ext.args = [
                '--limitSjdbInsertNsj 5000000'
                ]
        }
    }
}

if (!params.star_2pass) {
    process {
        withName: 'STAR_ALIGN' {
            ext.args = [
                '--outReadsUnmapped Fastx',
                '--outSAMtype BAM SortedByCoordinate',
                '--outSAMattributes NH HI AS nM NM MD jM jI',
                '--outSAMunmapped Within',
                '--quantMode TranscriptomeSAM',
                '--alignIntronMin 20',
                '--alignIntronMax 1200000',
                '--alignSJoverhangMin 8',
                '--alignSJDBoverhangMin 1',
                '--alignMatesGapMax 1200000',
                '--outFilterMultimapNmax 20',
                '--outFilterMismatchNmax 9999',
                '--outFilterMismatchNoverLmax 0.04'
            ]
            ext.suffix = null

            publishDir = [
                [
                path: { "${params.outdir}/star/bam" },
                mode: 'copy',
                pattern: '*{d,e}.out.bam'
                ],
                [
                path: { "${params.outdir}/star/junctions" },
                mode: 'copy',
                pattern: '*.SJ.out.tab'
                ],
                [
                path: { "${params.outdir}/star/unmapped" },
                mode: 'copy',
                pattern: '*.Unmapped.out.mate{1,2}.fastq.gz'
                ],
                [
                path: { "${params.outdir}/star/log" },
                mode: 'copy',
                pattern: '*Log.{,final,progress}.out'
                ]
            ]
        }

        withName:'SAMTOOLS_INDEX' {
            ext.args = null
            publishDir = [
                path: { "${params.outdir}/star/bam" },
                mode: 'copy',
                pattern: '*.{bam.bai,cram.crai}'
            ]
        }
    }
}
